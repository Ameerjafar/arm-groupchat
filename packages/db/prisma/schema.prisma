generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int      @id @default(autoincrement())
  telegramId          String   @unique
  username            String
  walletAddress       String?  @unique
  encryptedPrivateKey String
  groupId             String?
  group               Group?   @relation(fields: [groupId], references: [groupId])
  createdAt           DateTime @default(now())
  distribution        Distribution[] 
  updatedAt           DateTime @updatedAt
}

model Group {
  id        String   @id @default(uuid())
  groupId   String   @unique
  name      String
  members   User[]
  createdAt DateTime @default(now())
}

model Fund {
  id                   String         @id @default(uuid())
  groupId              String         @unique
  fundPdaAddress       String         @unique
  authority            String
  initiator            String?
  balance              BigInt         @default(0)
  transactionSignature String?
  fundName             String
  minContribution      BigInt
  tradingFeeBps        Int
  lastSyncedSlot       BigInt?
  status               FundStatus     @default(ACTIVE)
  isRecovered          Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  contributions        Contribution[]
  transactions         Transaction[]

  @@index([groupId])
  @@index([fundPdaAddress])
  @@map("funds")
}

enum FundStatus {
  ACTIVE
  CLOSED
  PAUSED
}

model Contribution {
  id                    String   @id @default(uuid())
  fundId                String
  fund                  Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)
  contributorTelegramId String
  contributorWallet     String
  amount                BigInt // in lamports
  sharesMinted          BigInt // shares received
  transactionSignature  String   @unique
  createdAt             DateTime @default(now())

  @@index([fundId])
  @@index([contributorTelegramId])
  @@index([contributorWallet])
  @@map("contributions")
}

model Transaction {
  id          String          @id @default(uuid())
  fundId      String
  fund        Fund            @relation(fields: [fundId], references: [id], onDelete: Cascade)
  type        TransactionType
  amount      BigInt
  signature   String          @unique
  fromAddress String?
  toAddress   String?
  initiator   String?
  status      TxStatus        @default(PENDING)
  slot        BigInt?
  blockTime   DateTime?
  timestamp   DateTime        @default(now()) 
  createdAt   DateTime        @default(now())

  @@index([fundId])
  @@index([signature])
  @@index([type])
  @@index([timestamp]) 
  @@map("transactions")
}

model FailedSync {
  id             String   @id @default(uuid())
  fundPdaAddress String
  groupId        String
  errorMessage   String
  retryCount     Int      @default(0)
  resolved       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([resolved])
  @@map("failed_syncs")
}

model Distribution {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [telegramId])
  userId         String
  fundId         String
  type           String   // "FULL_CASHOUT" or "PROFIT_ONLY"
  amount         String   // Amount distributed in lamports
  profitOrLoss   String   // Profit or loss in lamports (can be negative)
  sharesBurned   String   // Shares burned (0 for profit-only)
  txSignature    String   @unique
  distributedAt  DateTime @default(now())

  @@index([userId])
  @@index([fundId])
  @@index([distributedAt])
}

enum TransactionType {
  CONTRIBUTION
  WITHDRAWAL
  TRADE
  FEE
}

enum TxStatus {
  PENDING
  CONFIRMED
  FAILED
}
